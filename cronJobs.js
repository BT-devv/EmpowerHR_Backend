const cron = require("node-cron");
const moment = require("moment-timezone");
const mongoose = require("mongoose");
require("dotenv").config();
const Attendance = require("./models/Attendance");
const User = require("./models/User");
const Holiday = require("./models/Holiday");
const Absence = require("./models/Absence");

// K·∫øt n·ªëi MongoDB
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB trong cron job!"))
  .catch((err) => console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err));

const createDailyAttendanceRecords = () => {
  cron.schedule("1 0 * * *", async () => {
    // Ch·∫°y cron job l√∫c 00:01 m·ªói ng√†y
    //ch·∫°y cron job l√∫c 00:01 s√°ng m·ªói ng√†y
    //cron.schedule("* * * * *", async () => {
    //ch·∫°y m·ªói ph√∫t
    console.log("üîÑ ƒêang ch·∫°y cron job...");

    const today = moment().tz("Asia/Ho_Chi_Minh");
    const todayStr = today.format("YYYY-MM-DD");
    const dayOfWeek = today.day(); // 0: Ch·ªß nh·∫≠t, 1: Th·ª© 2, ..., 6: Th·ª© 7

    // B·ªè qua Th·ª© 7 v√† Ch·ªß Nh·∫≠t
    if (dayOfWeek === 0 || dayOfWeek === 6) {
      console.log(
        `üö´ H√¥m nay l√† Th·ª© ${
          dayOfWeek === 0 ? "Ch·ªß nh·∫≠t" : "B·∫£y"
        }. Kh√¥ng ch·∫°y cron job.`
      );
      return;
    }

    try {
      // Ki·ªÉm tra c√≥ ph·∫£i ng√†y l·ªÖ kh√¥ng
      const isHoliday = await Holiday.findOne({
        startDate: { $lte: today.toDate() },
        endDate: { $gte: today.toDate() },
      });

      if (isHoliday) {
        console.log(
          `üö´ H√¥m nay (${todayStr}) l√† ng√†y l·ªÖ: ${isHoliday.name}. Kh√¥ng ch·∫°y cron job.`
        );
        return;
      }

      console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t ch·∫•m c√¥ng cho ng√†y ${todayStr}...`);

      // L·∫•y danh s√°ch nh√¢n vi√™n
      const employees = await User.find();

      for (const emp of employees) {
        // Reset remainingDays v·ªÅ 0 v√†o ng√†y 1 th√°ng 1
        if (today.date() === 1 && today.month() === 0) {
          emp.remainingDays = 0;
        }

        // C·ªông th√™m 1 ng√†y ngh·ªâ v√†o ng√†y 1 m·ªói th√°ng n·∫øu nh·ªè h∆°n 6
        if (today.date() === 1 && emp.remainingDays < 6) {
          emp.remainingDays = Math.min(emp.remainingDays + 1, 6);
        }
        //test m·ªói 10 ph√∫t reset v·ªÅ gi√° tr·ªã 0
        /*if (today.minute() % 1 === 0) {
          emp.remainingDays = 0;
          console.log(`‚ôªÔ∏è Reset remainingDays c·ªßa ${emp.employeeID} v·ªÅ 0`);
        }

        // C·ªông th√™m 1 ng√†y ngh·ªâ n·∫øu nh·ªè h∆°n 6 m·ªói ph√∫t
        if (emp.remainingDays < 6) {
          emp.remainingDays = Math.min(emp.remainingDays + 1, 6);
          console.log(
            `‚ûï TƒÉng remainingDays cho ${emp.employeeID} l√™n ${emp.remainingDays}`
          );
        }*/
        await emp.save();
        // üëâ Ki·ªÉm tra xem h√¥m nay nh√¢n vi√™n n√†y c√≥ absence approved kh√¥ng
        const hasApprovedAbsence = await Absence.findOne({
          employeeID: emp.employeeID,
          status: "Approved",
          dateFrom: { $lte: today.toDate() },
          dateTo: { $gte: today.toDate() },
        });

        const status = hasApprovedAbsence ? "absent" : "pending";
        // T·∫°o b·∫£n ghi ch·∫•m c√¥ng (n·∫øu ch∆∞a c√≥) - d√πng upsert
        await Attendance.updateOne(
          { employeeID: emp.employeeID, date: todayStr },
          {
            $setOnInsert: {
              name: `${emp.firstName} ${emp.lastName}`,
              status: "absent",
              workingHours: "0m",
              timeOff: "8h",
            },
          },
          { upsert: true }
        );
      }

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ch·∫•m c√¥ng v√† ng√†y ngh·ªâ cho ng√†y ${todayStr}`);
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
    }
  });
};

module.exports = createDailyAttendanceRecords;
