const Absence = require("../models/absence");
const User = require("../models/User");
const moment = require("moment-timezone");
const authenticateToken = require("../middlewares/authMiddleware");

// üìù G·ª≠i y√™u c·∫ßu ngh·ªâ ph√©p
const requestAbsence = async (req, res) => {
  const { type, date, halfDaySession, reason, teammate } = req.body;
  const employeeID = req.user.employeeID; // L·∫•y employeeID t·ª´ user ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£ t·ª´ token

  try {
    const employee = await User.findOne({ employeeID: employeeID });
    if (!employee) {
      return res
        .status(404)
        .json({ success: false, message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i." });
    }

    const currentDate = moment().tz("Asia/Ho_Chi_Minh");
    const absenceDate = moment(date).tz("Asia/Ho_Chi_Minh");
    const dayOfWeek = absenceDate.isoWeekday(); // 1 = Th·ª© 2, ..., 7 = Ch·ªß nh·∫≠t

    // Ki·ªÉm tra ng√†y kh√¥ng ƒë∆∞·ª£c l√† qu√° kh·ª©
    if (absenceDate.isBefore(currentDate)) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu ngh·ªâ cho ng√†y trong qu√° kh·ª©.",
      });
    }

    // Kh√¥ng cho ph√©p request v√†o Th·ª© 7 (6) ho·∫∑c Ch·ªß nh·∫≠t (7)
    if (dayOfWeek === 6 || dayOfWeek === 7) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu ngh·ªâ v√†o Th·ª© 7 ho·∫∑c Ch·ªß nh·∫≠t.",
      });
    }
    // N·∫øu ngh·ªâ Full Day th√¨ ph·∫£i xin ph√©p tr∆∞·ªõc √≠t nh·∫•t 1 ng√†y
    if (type === "Full Day" && absenceDate.isSameOrBefore(currentDate, "day")) {
      return res.status(400).json({
        success: false,
        message: "Y√™u c·∫ßu ngh·ªâ Full Day ph·∫£i ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc √≠t nh·∫•t 1 ng√†y.",
      });
    }
    // Ki·ªÉm tra s·ªë ng√†y ngh·ªâ t√≠ch l≈©y c·ªßa nh√¢n vi√™n
    if (type === "Full Day" || type === "Half Day") {
      if (employee.accumulatedLeaveDays <= 0) {
        return res.status(400).json({
          success: false,
          message: "B·∫°n ƒë√£ h·∫øt s·ªë ng√†y ngh·ªâ, ngh·ªâ th√™m s·∫Ω b·ªã tr·ª´ l∆∞∆°ng!",
        });
      }
      employee.accumulatedLeaveDays -= type === "Full Day" ? 1 : 0.5;
      await employee.save();
    }

    // L∆∞u v√†o DB
    const absenceRequest = new Absence({
      employeeID,
      type,
      date,
      halfDaySession,
      reason,
      teammate,
    });

    await absenceRequest.save();

    // G·ª≠i th√¥ng b√°o cho Line Manager v√† team members
    const managers = await User.find({ role: "Manager" });
    const teamMembers = await User.find({
      department: employee.department,
      employeeID: { $ne: employeeID },
    });

    res.status(201).json({
      success: true,
      message: "ƒê√£ g·ª≠i y√™u c·∫ßu ngh·ªâ!",
      absence: absenceRequest,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i y√™u c·∫ßu ngh·ªâ:", error.message);
    res
      .status(500)
      .json({ success: false, message: "L·ªói h·ªá th·ªëng.", error: error.message });
  }
};

const approveAbsence = async (req, res) => {
  const { absenceID, status } = req.body;
  const approvedBy = req.user.employeeID;

  try {
    const absence = await Absence.findById(absenceID);
    if (!absence) {
      return res
        .status(404)
        .json({ success: false, message: "ƒê∆°n ngh·ªâ kh√¥ng t·ªìn t·∫°i." });
    }

    if (absence.status !== "Pending") {
      return res
        .status(400)
        .json({ success: false, message: "ƒê∆°n ngh·ªâ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥." });
    }

    absence.status = status;
    absence.approvedBy = approvedBy;
    await absence.save();

    res.status(200).json({
      success: true,
      message: `ƒê√£ ${status === "Approved" ? "duy·ªát" : "t·ª´ ch·ªëi"} ƒë∆°n ngh·ªâ.`,
    });
  } catch (error) {
    console.error("L·ªói khi duy·ªát ƒë∆°n ngh·ªâ:", error.message);
    res
      .status(500)
      .json({ success: false, message: "L·ªói h·ªá th·ªëng.", error: error.message });
  }
};

module.exports = {
  requestAbsence,
  approveAbsence,
};
