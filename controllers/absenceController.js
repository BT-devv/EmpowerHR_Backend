const Absence = require("../models/absence");
const User = require("../models/User");
const moment = require("moment-timezone");
const authenticateToken = require("../middlewares/authMiddleware");

// üìù G·ª≠i y√™u c·∫ßu ngh·ªâ ph√©p
const requestAbsence = async (req, res) => {
  const { type, dateFrom, dateTo, lineManagers, reason } = req.body;
  const employeeID = req.user.employeeID;

  try {
    const employee = await User.findOne({ employeeID });
    if (!employee) {
      return res
        .status(404)
        .json({ success: false, message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i." });
    }

    const currentDate = moment().tz("Asia/Ho_Chi_Minh");
    const absenceStart = moment(dateFrom).tz("Asia/Ho_Chi_Minh");
    const absenceEnd = moment(dateTo).tz("Asia/Ho_Chi_Minh");

    // Ki·ªÉm tra ng√†y kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©
    if (absenceStart.isBefore(currentDate, "day")) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu ngh·ªâ cho ng√†y trong qu√° kh·ª©.",
      });
    }

    // Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu
    if (absenceEnd.isBefore(absenceStart, "day")) {
      return res.status(400).json({
        success: false,
        message: "Ng√†y k·∫øt th√∫c kh√¥ng th·ªÉ tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu.",
      });
    }

    // Kh√¥ng cho ph√©p ngh·ªâ v√†o Th·ª© 7 ho·∫∑c Ch·ªß nh·∫≠t
    if (
      [6, 7].includes(absenceStart.isoWeekday()) ||
      [6, 7].includes(absenceEnd.isoWeekday())
    ) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu ngh·ªâ v√†o Th·ª© 7 ho·∫∑c Ch·ªß nh·∫≠t.",
      });
    }

    // Y√™u c·∫ßu ngh·ªâ Full Day ph·∫£i xin tr∆∞·ªõc √≠t nh·∫•t 1 ng√†y
    if (
      type === "Full Day" &&
      absenceStart.isSameOrBefore(currentDate, "day")
    ) {
      return res.status(400).json({
        success: false,
        message: "Y√™u c·∫ßu ngh·ªâ Full Day ph·∫£i ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc √≠t nh·∫•t 1 ng√†y.",
      });
    }

    // Ki·ªÉm tra s·ªë ng√†y ngh·ªâ t√≠ch l≈©y
    const leaveDays = absenceEnd.diff(absenceStart, "days") + 1;
    if (employee.accumulatedLeaveDays < leaveDays) {
      return res.status(400).json({
        success: false,
        message: "B·∫°n ƒë√£ h·∫øt s·ªë ng√†y ngh·ªâ, ngh·ªâ th√™m s·∫Ω b·ªã tr·ª´ l∆∞∆°ng!",
      });
    }
    employee.accumulatedLeaveDays -= leaveDays;
    await employee.save();

    // T·∫°o y√™u c·∫ßu ngh·ªâ ph√©p
    const absenceRequest = new Absence({
      employeeID,
      name: `${employee.firstName}${employee.lastName}`,
      type,
      dateFrom,
      dateTo,
      lineManagers,
      reason,
      status: "Pending",
      createdAt: moment().tz("Asia/Ho_Chi_Minh").toDate(),
      updatedAt: moment().tz("Asia/Ho_Chi_Minh").toDate(),
    });

    await absenceRequest.save();

    res.status(201).json({
      success: true,
      message: "ƒê√£ g·ª≠i y√™u c·∫ßu ngh·ªâ!",
      absence: absenceRequest,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i y√™u c·∫ßu ngh·ªâ:", error.message);
    res
      .status(500)
      .json({ success: false, message: "L·ªói h·ªá th·ªëng.", error: error.message });
  }
};

const approveAbsence = async (req, res) => {
  const { absenceID, status, rejectReason } = req.body;
  const approvedBy = req.user.employeeID; // L·∫•y ID ng∆∞·ªùi duy·ªát t·ª´ token

  try {
    const absence = await Absence.findById(absenceID);
    if (!absence) {
      return res
        .status(404)
        .json({ success: false, message: "ƒê∆°n ngh·ªâ kh√¥ng t·ªìn t·∫°i." });
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi duy·ªát c√≥ ph·∫£i l√† Line Manager kh√¥ng
    if (!absence.lineManagers.includes(approvedBy)) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát ƒë∆°n n√†y.",
      });
    }

    // Ki·ªÉm tra n·∫øu ƒë∆°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
    if (absence.status !== "Pending") {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n ngh·ªâ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥.",
      });
    }

    // Ki·ªÉm tra n·∫øu t·ª´ ch·ªëi m√† kh√¥ng c√≥ l√Ω do
    if (status === "Rejected" && !rejectReason) {
      return res.status(400).json({
        success: false,
        message: "C·∫ßn nh·∫≠p l√Ω do t·ª´ ch·ªëi.",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i, ng∆∞·ªùi duy·ªát v√† th·ªùi gian c·∫≠p nh·∫≠t
    absence.status = status;
    absence.approvedBy = approvedBy;
    absence.updatedAt = moment().tz("Asia/Ho_Chi_Minh").toDate();

    if (status === "Rejected") {
      absence.rejectReason = rejectReason;
    }

    await absence.save();

    res.status(200).json({
      success: true,
      message: `ƒê√£ ${status === "Approved" ? "duy·ªát" : "t·ª´ ch·ªëi"} ƒë∆°n ngh·ªâ.`,
      absence,
    });
  } catch (error) {
    console.error("L·ªói khi duy·ªát ƒë∆°n ngh·ªâ:", error.message);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
      error: error.message,
    });
  }
};
const getPendingAbsences = async (req, res) => {
  try {
    const pendingAbsences = await Absence.find({ status: "Pending" });

    res.status(200).json({
      success: true,
      message: "Danh s√°ch ƒë∆°n ngh·ªâ ph√©p ƒëang ch·ªù duy·ªát.",
      absences: pendingAbsences,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n ngh·ªâ ph√©p:", error.message);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
      error: error.message,
    });
  }
};
const getAbsencesHistory = async (req, res) => {
  try {
    const processedAbsences = await Absence.find({
      status: { $ne: "Pending" },
    });

    res.status(200).json({
      success: true,
      message: "Danh s√°ch ƒë∆°n ngh·ªâ ph√©p ƒë√£ x·ª≠ l√Ω.",
      absences: processedAbsences,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n ngh·ªâ ph√©p:", error.message);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
      error: error.message,
    });
  }
};

module.exports = {
  requestAbsence,
  approveAbsence,
  getAbsencesHistory,
  getPendingAbsences,
};
