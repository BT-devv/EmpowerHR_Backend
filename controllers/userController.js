const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const moment = require("moment-timezone");
const crypto = require("crypto");
const QRCode = require("qrcode");
const nodemailer = require("nodemailer");
const { checkIn, checkOut } = require("./attendanceController");
const { use } = require("../routes/absenceRoutes");
const { text } = require("body-parser");
const otpStore = new Map(); // L∆∞u OTP t·∫°m th·ªùi

const login = async (req, res) => {
  const { emailCompany, password } = req.body;

  try {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(emailCompany)) {
      return res
        .status(400)
        .json({ success: false, message: "Invalid email format" });
    }

    if (password.length < 8 || password.length > 64) {
      return res
        .status(400)
        .json({ success: false, message: "Invalid password length" });
    }

    const user = await User.findOne({ emailCompany });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Account does not exist" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res
        .status(401)
        .json({ success: false, message: "Incorrect Password" });
    }

    // T·∫°o token c√≥ ch·ª©a userID
    const token = jwt.sign(
      {
        userId: user._id,
        employeeID: user.employeeID,
        emailCompany: user.emailCompany,
      },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    return res.status(200).json({
      success: true,
      message: "Login success!",
      token,
      userId: user._id, // G·ª≠i userId v·ªÅ client
      employeeID: user.employeeID,
    });
  } catch (error) {
    console.error("Error Login:", error.message);
    return res.status(500).json({
      success: false,
      message: "Error, please try again later.",
    });
  }
};

const forgotPassword = async (req, res) => {
  const { emailCompany } = req.body;

  try {
    const user = await User.findOne({ emailCompany });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // T·∫°o m√£ OTP ng·∫´u nhi√™n (6 s·ªë)
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = Date.now() + 5 * 60 * 1000; // H·∫øt h·∫°n sau 5 ph√∫t

    otpStore.set(emailCompany, { otp, expiresAt });

    // G·ª≠i OTP qua email
    await sendEmail(
      emailCompany,
      " [EmpowerHR] - M√£ OTP y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u ",
      `K√≠nh g·ª≠i ${user.firstName} ${user.lastName},

Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u h·ªá th·ªëng EmpowerHR. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh n√†y, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP (One-Time Password) ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y:

üîπ M√£ OTP: ${otp}

M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong v√≤ng 5 ph√∫t. Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ x√°c nh·∫≠n y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u.

N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.

üîí L∆∞u √Ω: Kh√¥ng chia s·∫ª m√£ OTP n√†y v·ªõi b·∫•t k·ª≥ ai.

N·∫øu b·∫°n g·∫∑p b·∫•t k·ª≥ v·∫•n ƒë·ªÅ n√†o, vui l√≤ng li√™n h·ªá [email b·ªô ph·∫≠n IT] ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.

Tr√¢n tr·ªçng,  
Ph√≤ng H√†nh Ch√≠nh - Nh√¢n S·ª± 
üìû [S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£]  
‚úâÔ∏è [Email h·ªó tr·ª£]`
    );

    res
      .status(200)
      .json({ success: true, message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email" });
  } catch (error) {
    console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error.message);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server, th·ª≠ l·∫°i sau." });
  }
};
const verifyOTP = async (req, res) => {
  const { emailCompany, otp } = req.body;

  try {
    const storedOTP = otpStore.get(emailCompany);
    if (!storedOTP) {
      return res
        .status(400)
        .json({ success: false, message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    if (storedOTP.otp !== otp) {
      return res
        .status(400)
        .json({ success: false, message: "OTP kh√¥ng ch√≠nh x√°c" });
    }

    // N·∫øu OTP ƒë√∫ng, x√≥a kh·ªèi b·ªô nh·ªõ t·∫°m
    otpStore.delete(emailCompany);
    return res.status(200).json({
      success: true,
      message: "OTP h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi",
    });
  } catch (error) {
    console.error("L·ªói x√°c minh OTP:", error.message);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server, th·ª≠ l·∫°i sau." });
  }
};
const resetPassword = async (req, res) => {
  const { emailCompany, newPassword } = req.body;

  try {
    const user = await User.findOne({ emailCompany });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi kh√¥ng m√£ h√≥a
    user.password = newPassword;
    await user.save();

    res
      .status(200)
      .json({ success: true, message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server, th·ª≠ l·∫°i sau." });
  }
};

const getAllUsers = async (req, res) => {
  try {
    const users = await User.find(); // L·∫•y to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng users
    if (!users || users.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng" });
    }

    res.status(200).json(users); // Tr·∫£ v·ªÅ d·ªØ li·ªáu d·∫°ng JSON
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
const getUserById = async (req, res) => {
  const { id } = req.params;
  try {
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    res.status(200).json(user);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error retrieving user", error: error.message });
  }
};

const generatePassword = (length = 8) => {
  const chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
  let password = "";
  for (let i = 0; i < length; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
};

const sendEmail = async (emailCompany, subject, text) => {
  try {
    let transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "lupinnguyen1811@gmail.com", // Thay b·∫±ng email c·ªßa b·∫°n
        pass: "owdn vxar raqc vznv", // Thay b·∫±ng m·∫≠t kh·∫©u ·ª©ng d·ª•ng (App Password)
      },
    });

    let mailOptions = {
      from: "lupinnguyen1811@gmail.com",
      to: emailCompany,
      subject: subject,
      text: text,
    };

    await transporter.sendMail(mailOptions);
    console.log("üìß Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå G·ª≠i email th·∫•t b·∫°i:", error.message);
  }
};

const createUser = async (req, res) => {
  const {
    avatar,
    firstName,
    lastName,
    dateOfBirth,
    gender,
    idCardNumber,
    phoneNumber,
    emailCompany,
    emailPersonal,
    password, // M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a tr∆∞·ªõc
    bankAccountNumber,
    department,
    role,
    employeeType,
    status,
    address,
    province,
    city,
    postcode,
  } = req.body;

  try {
    console.log("üìß Debug: emailCompany nh·∫≠n ƒë∆∞·ª£c:", emailCompany);

    const existingUser = await User.findOne({ emailCompany });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: "Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.",
      });
    }

    // N·∫øu kh√¥ng c√≥ m·∫≠t kh·∫©u, t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
    const userPassword = password || generatePassword();

    // T·∫°o user m·ªõi
    const newUser = new User({
      avatar,
      firstName,
      lastName,
      dateOfBirth,
      gender,
      idCardNumber,
      phoneNumber,
      emailCompany,
      emailPersonal,
      password: userPassword, // Gi·ªØ nguy√™n m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a
      bankAccountNumber,
      department,
      role,
      employeeType,
      status,
      address,
      province,
      city,
      postcode,
    });

    await newUser.save();

    // G·ª≠i email ch·ª©a m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng
    await sendEmail(
      emailCompany,
      " [EmpowerHR] Th√¥ng Tin ƒêƒÉng Nh·∫≠p T√†i Kho·∫£n Nh√¢n Vi√™n",
      `K√≠nh g·ª≠i ${firstName} ${lastName},
    
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng EmpowerHR! D∆∞·ªõi ƒë√¢y l√† th√¥ng tin ƒëƒÉng nh·∫≠p t√†i kho·∫£n c·ªßa b·∫°n:
    
üîπ T√™n ƒëƒÉng nh·∫≠p (Email c√¥ng ty): ${emailCompany}  
üîπ M·∫≠t kh·∫©u t·∫°m th·ªùi: ${userPassword}  
    
Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng t·∫°i [link h·ªá th·ªëng], sau ƒë√≥ thay ƒë·ªïi m·∫≠t kh·∫©u ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n.
    
üîí H∆∞·ªõng d·∫´n thay ƒë·ªïi m·∫≠t kh·∫©u:
 1Ô∏è‚É£ Truy c·∫≠p v√†o [link h·ªá th·ªëng]  
 2Ô∏è‚É£ ƒêƒÉng nh·∫≠p b·∫±ng th√¥ng tin tr√™n  
 3Ô∏è‚É£ V√†o m·ª•c T√†i kho·∫£n > ƒê·ªïi m·∫≠t kh·∫©u 
 4Ô∏è‚É£ X√°c nh·∫≠n OTP ƒë∆∞·ª£c g·ª≠i qua email v√† t·∫°o m·∫≠t kh·∫©u m·ªõi  
    
N·∫øu b·∫°n g·∫∑p b·∫•t k·ª≥ v·∫•n ƒë·ªÅ n√†o, vui l√≤ng li√™n h·ªá [email b·ªô ph·∫≠n IT] ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.
    
Tr√¢n tr·ªçng,  
Ph√≤ng H√†nh Ch√≠nh - Nh√¢n S·ª±  
üìû [S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£]  
‚úâÔ∏è [Email h·ªó tr·ª£]`
    );

    console.log("M·∫≠t kh·∫©u s·ª≠ d·ª•ng:", userPassword);
    res.status(201).json({
      success: true,
      message:
        "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng! M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email Company",
      user: newUser,
    });
  } catch (error) {
    console.error("L·ªói t·∫°o ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi t·∫°o ng∆∞·ªùi d√πng.",
      error: error.message,
    });
  }
};

const updateUser = async (req, res) => {
  const { id } = req.params;
  const {
    avatar,
    firstName,
    lastName,
    dateOfBirth,
    gender,
    idCardNumber,
    phoneNumber,
    email,
    password,
    bankAccountNumber,
    department,
    role,
    employeeType,
    status,
    address,
    province,
    city,
    postcode,
  } = req.body;

  try {
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
      });
    }

    user.avatar = avatar || user.avatar;
    user.firstName = firstName || user.firstName;
    user.lastName = lastName || user.lastName;
    user.dateOfBirth = dateOfBirth || user.dateOfBirth;
    user.gender = gender !== undefined ? gender : user.gender;
    user.idCardNumber = idCardNumber || user.idCardNumber;
    user.phoneNumber = phoneNumber || user.phoneNumber;
    user.email = email || user.email;
    if (password) {
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
    }
    user.bankAccountNumber = bankAccountNumber || user.bankAccountNumber;
    user.department = department || user.department;
    user.role = role || user.role;
    user.employeeType = employeeType || user.employeeType;
    user.status = status || user.status;
    user.address = address || user.address;
    user.province = province || user.province;
    user.city = city || user.city;
    user.postcode = postcode || user.postcode;

    await user.save();

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      user,
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng.",
      error: error.message,
    });
  }
};

const deleteUser = async (req, res) => {
  const { id } = req.params;

  try {
    const user = await User.findByIdAndDelete(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
      });
    }

    res.status(200).json({
      success: true,
      message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      user,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server.",
      error: error.message,
    });
  }
};

const searchUsers = async (req, res) => {
  const { keyword } = req.query;

  try {
    const users = await User.find({
      $or: [
        { email: { $regex: keyword, $options: "i" } },
        { firstName: { $regex: keyword, $options: "i" } },
        { lastName: { $regex: keyword, $options: "i" } },
      ],
    });

    if (users.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o ph√π h·ª£p.",
      });
    }

    res.status(200).json({
      success: true,
      message: "T√¨m ki·∫øm th√†nh c√¥ng!",
      users,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ng∆∞·ªùi d√πng.",
      error: error.message,
    });
  }
};

const getNextEmployeeID = async (req, res) => {
  try {
    const year = new Date().getFullYear().toString().slice(-2); // L·∫•y 2 s·ªë cu·ªëi c·ªßa nƒÉm hi·ªán t·∫°i
    const companyPrefix = "EMP"; // Prefix c·ªßa c√¥ng ty

    // T√¨m t√†i li·ªáu c√≥ employeeID l·ªõn nh·∫•t trong nƒÉm hi·ªán t·∫°i
    const lastUser = await User.findOne({
      employeeID: { $regex: `^${companyPrefix}-${year}` },
    })
      .sort({ employeeID: -1 })
      .exec();

    let newIDNumber = 1; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ employeeID n√†o
    if (lastUser && lastUser.employeeID) {
      const lastID = parseInt(lastUser.employeeID.split("-")[1].slice(2)); // L·∫•y ph·∫ßn s·ªë t·ª´ employeeID
      newIDNumber = lastID + 1; // TƒÉng gi√° tr·ªã l√™n 1
    }

    // T·∫°o employeeID ti·∫øp theo
    const newID = String(newIDNumber).padStart(5, "0");
    const nextEmployeeID = `${companyPrefix}-${year}${newID}`;

    return res.status(200).json({
      success: true,
      employeeID: nextEmployeeID,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({
      success: false,
      message: "Failed to generate next employeeID.",
    });
  }
};

// API ƒë·ªÉ hi·ªÉn th·ªã m√£ QR
const getQRCode = async (req, res) => {
  try {
    const user = await User.findById(req.user.userId);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }

    const qrData = {
      EmployeeID: user.employeeID,
      Name: `${user.firstName} ${user.lastName}`,
      Department: user.department,
      Role: user.role,
      EmployeeType: user.employeeType,
    };

    QRCode.toDataURL(JSON.stringify(qrData), (err, url) => {
      if (err) {
        return res.status(500).json({
          success: false,
          message: "Error generating QR Code",
          error: err.message,
        });
      }

      res.status(200).json({
        success: true,
        message: "QR Code generated successfully",
        qrCode: url,
      });
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "An error occurred",
      error: error.message,
    });
  }
};
// API scan QR
const scanQRCode = async (req, res) => {
  try {
    const { qrData, action } = req.body; // Nh·∫≠n d·ªØ li·ªáu t·ª´ QR Code v√† h√†nh ƒë·ªông (check-in ho·∫∑c check-out)

    if (!qrData || !qrData.EmployeeID) {
      return res.status(400).json({
        success: false,
        message: "Invalid QR Code data",
      });
    }

    const employeeID = qrData.EmployeeID;

    if (action === "check-in") {
      return checkIn({ body: { employeeID } }, res); // G·ªçi API check-in
    } else if (action === "check-out") {
      return checkOut({ body: { employeeID } }, res); // G·ªçi API check-out
    } else {
      return res.status(400).json({
        success: false,
        message: "Invalid action. Use 'check-in' or 'check-out'",
      });
    }
  } catch (error) {
    console.error("QR Scan error:", error);
    res.status(500).json({
      success: false,
      message: "Error processing QR Code",
      error: error.message,
    });
  }
};
module.exports = {
  login,
  forgotPassword,
  verifyOTP,
  resetPassword,
  getAllUsers,
  getUserById,
  updateUser,
  createUser,
  deleteUser,
  searchUsers,
  getNextEmployeeID,
  getQRCode,
  scanQRCode,
};
